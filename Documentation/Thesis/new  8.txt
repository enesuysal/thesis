We have given an example for mobile phone and weathercast provider interaction in previous sections. Now lets demonstrate how it will work in our solution. Again your mobile phone creates a query and then sends it to weathercast provider. After a message arrived to weathercast provider. it calculate the response message and sent it to your mobile phone and it displays you the result. Here again your phone application is developed with JAVA and weathercast provider is developed with.Net technology. In our solution your mobile will create a binary message and send it to weathercast provider using websocket or HTTP2 technology. in Listing x shows very simple example message that can be sent to weathercast provider. So it is a weather object which will be transformed to binary and transferred to weathercast provider. In weathercast provider has Receiver class and it has different methods with @AvaliableMethod notation and they are responsible to be matched when compliance is happening. After a message arrives from your mobile phone, The system checks your message and methods in Receiver class and if one is matched it invokes its method and return response code. Let's say we have Weather1 class in Receiver and it has primitive values as in Listing xx. As it seen all primitive data has Mondatory notation so in that case type of primitive, name of primitive and value of primitive must be the same to be matched. if we have city name Braga instead of Lisbon it will not matched and the result will not be returned. Lets say we have another Weather2 class as in Listing and in that class not all primitive values have mandatory annotation. So now when your phone send message. it is only important city information which is mondatory. Lets say we are sending weather object as in Listing cc, and receiver has Weather2   