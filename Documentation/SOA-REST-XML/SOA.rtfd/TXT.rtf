{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 BookAntiqua;\f2\froman\fcharset0 Times-Roman;
\f3\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid1\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww26280\viewh13940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://examples.javacodegeeks.com/enterprise-java/jws/jax-ws-web-services-on-tomcat/"}}{\fldrslt 
\f0\fs24 \cf0 http://examples.javacodegeeks.com/enterprise-java/jws/jax-ws-web-services-on-tomcat/}}
\f0\fs24 \
\
{\field{\*\fldinst{HYPERLINK "http://tomee.apache.org/examples-trunk/simple-webservice/README.html"}}{\fldrslt http://tomee.apache.org/examples-trunk/simple-webservice/README.html}}\
\
{\field{\*\fldinst{HYPERLINK "http://docs.spring.io/spring-ws/site/reference/html/tutorial.html"}}{\fldrslt http://docs.spring.io/spring-ws/site/reference/html/tutorial.html}}\
\
{\field{\*\fldinst{HYPERLINK "http://publib.boulder.ibm.com/infocenter/wsdoc400/v6r0/index.jsp?topic=/com.ibm.websphere.iseries.doc/info/ae/ae/rwbs_map.html"}}{\fldrslt http://publib.boulder.ibm.com/infocenter/wsdoc400/v6r0/index.jsp?topic=/com.ibm.websphere.iseries.doc/info/ae/ae/rwbs_map.html}}\
\
\
Kitap \'d6zeti\
\
SOA\
\
\pard\pardeftab720\sa240

\f1\fs30 \cf0 \expnd0\expndtw0\kerning0
 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\f1\i\fs30 \cf0 \expnd0\expndtw0\kerning0
SOA is a software architecture that starts with an interface definition and builds the entire application topology as a topology of interfaces, interface implementations, and interface calls... 
\f2\i0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\f1\fs30 \cf0 \expnd0\expndtw0\kerning0
Despite being coined much earlier, SOA started to become a buzzword only in early 2000. With the advent of web services and WSDL compliant business process, SOA started to become popular among technology enthusiasts. 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240
\ls1\ilvl0
\f1\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
objective of using SOA 
\f2\fs24 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0
\f1\b\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Loose coupling 
\f2\b0 \expnd0\expndtw0\kerning0
: 
\f1 \kerning1\expnd0\expndtw0 	\'95	\expnd0\expndtw0\kerning0
The business process being decomposed into independent services will help in bringing down the dependencies on a single process. This in turn will help in faster processing time 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1\b 	\'95	\expnd0\expndtw0\kerning0
Platform-neutrality
\b0 \expnd0\expndtw0\kerning0
: XML-based message information flow enhances the capability to achieve platform neutrality. These XML messages are based on agreed XML schema, eliminating the need to set up other messaging standards that can differ across platforms. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0
\f1\b\fs30 \cf0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Standards
\b0 \expnd0\expndtw0\kerning0
: The message flow across the enterprise is in the form of globally accepted standards. The service only has to depend on the service descriptions without worrying about the target standards and removing the dependencies. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0
\f1\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Reusability
\b0 \expnd0\expndtw0\kerning0
: The business logic being divided into smaller logical units, the services can easily be re-used. These enhance the utilization of SOA-based solution, which has a cascading affect on service delivery and execution. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0
\f1\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Scalability
\b0 \expnd0\expndtw0\kerning0
: Again, as the business processes are decomposed into smaller units, adding new business logic is easy to accomplish. The new logic could either be added as an extended unit of the current service, or it can also be constructed as a new service. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\pardeftab720\sa240
\ls2\ilvl0
\f1 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
How is the service consumer (the part of software that makes use of the service, for example, on the User Interface side) expected to invoke the service and receive the list of requested objects? 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0
\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1 \expnd0\expndtw0\kerning0
This can be done in different ways. Among them, the most popular are: 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0
\f1\b\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
With platform native calls
\b0 \expnd0\expndtw0\kerning0
: As far as Java is concerned this may be implemented through 
\b \expnd0\expndtw0\kerning0
Remote Method Invocation 
\b0 \expnd0\expndtw0\kerning0
(
\b \expnd0\expndtw0\kerning0
RMI
\b0 \expnd0\expndtw0\kerning0
), Sockets, Servlets, or JMS. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0
\f1\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
With a distributed object communication middleware
\b0 \expnd0\expndtw0\kerning0
: CORBA or DCOM are just some examples. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0
\f1\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
With a text-based communication protocol
\b0 \expnd0\expndtw0\kerning0
: This can be done by sending the request as a text stream and obtaining a textual response containing the data. This is the approach on which web services are based. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
The first way is straightforward, but it has some drawbacks. It is tied to a common language (the service and its consumer must share the same technology and language\'97for example Java, .NET). Furthermore, the exchanged object's classes must be the same version otherwise the communication will not happen. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
Distributed object communication middleware have been a successful answer for a considerable time span. CORBA in particular, thanks to its cross-platform nature, has offered an evident asset where interoperability was needed. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
The text-based approach implies, on the other side, a process of serialization (conversion from object to a textual form) when the client sends the request, and a process of deserialization (conversion from text to object) when received by the server. A similar double process must happen then for the response flow. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
The serialization and deserialization processes seem to add complexity to the communication. But consider the advantage, a complete independence from technologies and loose coupling between parts. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f0\fs24 {{\NeXTGraphic Pasted Graphic 1.pdf \width7260 \height3720
}¬}\
\pard\tx566\pardeftab720\sa293

\f2\fs30 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\f1 \cf0 \expnd0\expndtw0\kerning0
The 
\b \expnd0\expndtw0\kerning0
Representational State Transfer 
\b0 \expnd0\expndtw0\kerning0
(
\b \expnd0\expndtw0\kerning0
REST
\b0 \expnd0\expndtw0\kerning0
) is a web architectural style presented by Roy Fielding back in 2000 in his doctoral thesis. The basic idea of REST is the full exploitation of the HTTP protocol, in particular: 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls3\ilvl0
\f1\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
It focuses on 
\b \expnd0\expndtw0\kerning0
Resources
\b0 \expnd0\expndtw0\kerning0
, that is, each service should be designed as an action on a resource. 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls3\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
It takes full advantage of all 
\b \expnd0\expndtw0\kerning0
HTTP verbs 
\b0 \expnd0\expndtw0\kerning0
(not just GET and POST, but also PUT and DELETE). 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\pardeftab720\sa240

\f3\b\fs48 \cf0 \expnd0\expndtw0\kerning0
SOAP 
\f2\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\f1\fs30 \cf0 \expnd0\expndtw0\kerning0
The 
\b \expnd0\expndtw0\kerning0
Simple Object Access Protocol 
\b0 \expnd0\expndtw0\kerning0
(
\b \expnd0\expndtw0\kerning0
SOAP
\b0 \expnd0\expndtw0\kerning0
) is a web service standard communication protocol defined by the W3C. It basically defines the structure of the exchanged message, which is composed of an "envelope" with a "header" and a "body". As you will see next, this protocol adds various levels of complexity. But it also offers a wide range of powerful features, among which are: 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293
\ls4\ilvl0
\f1\fs30 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Automatic generation of classes involved in the communication process 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls4\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Automatic generation of the web service descriptor (WSDL) 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls4\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Automatic generation of client classes starting from the service WSDL 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls4\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Ability to be used with network protocols other than HTTP (for example, SMTP or JMS) 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls4\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Ability to encapsulate authentication mechanisms 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls4\ilvl0
\f1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Ability to establish a stateful conversation 
\f2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\pardeftab720\sa240

\f3\fs80 \cf0 \expnd0\expndtw0\kerning0
Goals We Can Achieve with SOA 
\f2\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx566\pardeftab720\sa293

\fs30 \cf0 \expnd0\expndtw0\kerning0
\
}