BuEnes,

 

I’m very sorry about my delay in answering you. I had several problems with my Windows 10 upgrade. I had to reinstall it from scratch, and it still crashes when I connect the PC to a projector…

 

The idea of centralizing the “object of primitive type to a sequence of bytes” and vice-versa methods in a single class is to avoid the need for every class to have these methods. Since they are static (they receive an object and return bytes, or vice versa), they can simply be concentrated in a static class (no instances) and invoked from anywhere.

 

The methods to serialize can receive a primitive object (integer, Boolean, etc) and an array of bytes, returning the array of bytes with the serialized object’s bytes appended. Therefore, each serialization method grows the byte array. When the user wants to send a message, that message needs to be an instance of a class that has a method that knows how to serialize it, by invoking the serialization methods of the static class for each of its variables. This needs to be programmed by the use and is similar to the programming language’s serialization methods.

 

The deserialization methods of the static class do the opposite of the serialization ones, but are not invoked directly by the user’s code. Instead:

 

-          the receiving platform (the code you should build) makes the compliance tests in binary (all it needs to know is the binary format to be able to traverse both the received message and each operation’s formal argument, previously serialized)

-          When it finds a suitable operation, it builds another array of bytes from both the message and the formal argument. Components that match, use the message ones. Components in the formal argument that are not matched by any in the message, use the ones already in the formal argument

-          Then, the platform invokes the operation after generating the argument’s object from array of bytes. This can be done either by reflection or by invoking a constructor defined by the user in the class of the formal argument, which knows how to build itself from an array of bytes that respects its components (the new array of bytes respects this because it was created by copying the original array of bytes of the serialized formal arguments, replacing only the components that matched).

 

 To serialize the operation’s arguments, note that these are either primitive or have a specific class. To serialize them, you invoke a serialize method in that static class. This method is overloaded in the static class with all the relevant primitive types and also with a structured object type. Now you have two options:

 

-          The structured object is Object (in Java, in C# I don’t know which is the root type) and the object is serialized by inspection

-          You guarantee that all structured argument’s classes implement a serialization interface, much in the line of what programming languages currently do, and each argument class needs to implement  serialization of its components.

 

This is actually the same as serializing any message to be sent, so it is up to you how to do, inspection (easier to use) or serialization interface (more controllable and efficient).

 

BASE64 has nothing to do with this. It is just a way to send an array of bytes over a protocol that does not support binary, such as HTTP. If you use HTTP 2, which supports binary, you do not need BASE64.

 

Also, HTTP (and the corresponding server) is just one possible implementation. We could also use any other type of network. The advantage of HTTP is that there are available many implementations and it makes the comparison with Web Services and REST easier. So, I recommend that you use HTTP and a Web server to start (with BASE64) and later, if time permits, HTTP 2 (without BASE64) to compare performance gains with respect to your HTTP implementation.

 

Regards,

 

Delgado
